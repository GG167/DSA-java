import java.lang.*;
public class LL
{
    public static class Node
    {
        int data;
        Node next;
        public Node(int data)
        {
            this.data=data;
            this.next=null;
        }
    }
    public static Node head;
    public static Node tail;
    public static int size;//initially it is zero

    public void addFirst(int data)
    {
        Node newNode=new Node(data);
        size++;
        if(head==null)
        {
            head=tail=newNode;
            return;
        }
        newNode.next=head;
        head=newNode;
    }
    public void addLast(int data)
    {
        Node newNode=new Node(data);
        size++;
        if(head==null)
        {
            head=tail=newNode;
            return;
        }
        tail.next=newNode;
        tail=newNode;
    }
    public void printLL()
    {
        if(head==null)
        {
            System.out.println("Empty");
        }
        else
        {
            Node temp=head;
            while(temp!=null)
            {
                System.out.print(temp.data+"->");
                temp=temp.next;
            }
            System.out.println("null");
        }
    }
    public void add(int indx,int data)
    {
        if(indx==0)
        {
            addFirst(data);
        }
        else
        {
            Node newNode=new Node(data);
            size++;
            Node temp=head;
            int i=0;
            while(i<indx-1)
            {
                temp=temp.next;
                i++;
            }
            //temp=indx-1
            newNode.next=temp.next;
            temp.next=newNode;
        }
    }
    public void removeFirst()
    {
        if(size==0)
        {
            System.out.println("LL is empty");
            //return Integer.MIN_VALUE;
        }
        else if(size==1)
        {
            size=0;
            //int val=head.data;
            head=tail=null;
            //return val;
        }size--;
        //int val=head.data;
        head=head.next;
        //return val;
    }
    public void removeLast()
    {
        if(size==0)
        {
            System.out.println("Empty");
        }
        else if(size==1)
        {
            head=tail=null;
        }
        Node prev=head;
        for(int i=0;i<size-2;i++)
        {
            prev=prev.next;
        }
        size--;
        prev.next=null;
        tail=prev;
    }
    public int search(int key)
    {
        Node temp=head;
        int i=0;
        while(temp!=null)
        {
            if(key==temp.data)
            {
                return i;
            }
            temp=temp.next;
            i++;
        }return -1; 
    }
    public int helper(Node head,int key)
    {
        if(head==null)
        {
            return -1;
        }
        if(head.data==key)
        {
            return 0;
        }
        int indx=helper(head.next,key);
        if(indx==-1)
        {
            return -1;
        }
        return indx+1;
    }
    public int recSearch(int key)
    {
        return helper(head,key);
    }
    public void reverse()
    {
        Node curr=tail=head;
        Node prev=null;
        Node next;
        while(curr!=null)
        {
            next=curr.next;
            curr.next=prev;
            prev=curr;
            curr=next;
        }
        head=prev;
    }
    public void removeNthnode(int n)
    {
        if(size==n)
        {
            head=head.next;
        }
        Node prev=head;
        int i=0;
        while(i<size-n)
        {
            prev=prev.next;
            i++;
        }
        System.out.println("Element is deleted :"+prev.next.data);
        prev.next=prev.next.next;

    }
    public Node findmid(Node head)
    {
        Node slow=head;
        Node fast=head;
        while(fast!=null)
        {
            slow=slow.next;
            fast=fast.next.next;
        }
        return slow;
    }
    public boolean palin()
    {
        if(head==null||head.next==null)
        {
            return true;
        }
        
        Node curr=findmid(head);
        Node prev=null;
        Node next;

        while (curr!=null) 
        {
            next=curr.next;
            curr.next=prev;
            prev=curr;
            curr=next;
            
        }
        Node right=prev;
        Node left=head;

        while(right!=null)
        {
            if(left.data==right.data)
            {
                return true;
            }
            right=right.next;
            left=left.next;
        }
        return true;
    }
    public static void main(String args[])
    {
        LL ll=new LL();
        ll.addFirst(1);
        ll.addFirst(2);
        ll.addLast(2);
        ll.addLast(1);
        //ll.add();
    
        ll.printLL();
        //System.out.println("Palin "+ll.palin());
       
        ll.reverse();
        ll.printLL();
        System.out.println("Palin "+ll.palin());
        //ll.removeNthnode(3);

       // ll.printLL();

        //System.out.println("Count = "+ll.size);

        /*ll.removeFirst();

        ll.printLL();
    
        ll.removeLast();
        ll.printLL();

        System.out.println("key found at "+ll.recSearch(3));
        System.out.println("key found at "+ll.recSearch(5));
        System.out.println("Count = "+ll.size);
       // ll.reverse();
        //ll.printLL();*/
    }
}
